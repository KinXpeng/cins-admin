{"version":3,"file":"static/js/244.e6aff627.chunk.js","mappings":"8RACA,EAA8B,2BAA9B,EAAsE,0BAAtE,EAAoH,iC,SC0EpH,OAAeA,EAAAA,EAAAA,KAlEf,WACE,IAAQC,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAWC,EAAAA,EAAAA,MACjB,GAAoCC,EAAAA,EAAAA,KAA5BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YACpB,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAaA,OACE,gBAAKC,UAAWC,EAAhB,UACE,SAAC,IAAD,CAAMC,SAAUJ,EAAhB,UACE,UAAC,IAAD,CACEK,KAAK,eACLH,UAAWC,EACXG,cAAe,CACbC,UAAU,GAEZC,SApBS,SAACC,GAEhBZ,EAAWa,QAEXT,GAAW,GACXU,YAAW,WACTjB,EAAS,IAAK,CAAEkB,SAAS,IACzBd,EAAYe,YACZZ,GAAW,KACV,MAKC,WAQE,SAAC,SAAD,CACEI,KAAK,WACLS,MAAO,CACL,CACEC,UAAU,EACVC,QAASxB,EAAE,0BALjB,UASE,SAAC,IAAD,CAAOyB,QAAQ,SAACC,EAAA,EAAD,CAAchB,UAAU,wBAA0BiB,YAAa3B,EAAE,uBAElF,SAAC,SAAD,CACEa,KAAK,WACLS,MAAO,CACL,CACEC,UAAU,EACVC,QAASxB,EAAE,0BALjB,UASE,SAAC,IAAD,CAAOyB,QAAQ,SAACG,EAAA,EAAD,CAAclB,UAAU,wBAA0BmB,KAAK,WAAWF,YAAa3B,EAAE,uBAElG,SAAC,SAAD,WACE,SAAC,SAAD,CAAWa,KAAK,WAAWiB,cAAc,UAAUC,SAAO,EAA1D,UACE,SAAC,IAAD,UAAW/B,EAAE,yBAIjB,SAAC,SAAD,WACE,SAAC,IAAD,CAAQ6B,KAAK,UAAUG,SAAS,SAAStB,UAAWC,EAApD,SACGX,EAAE","sources":["webpack://cins-admin/./src/pages/login/index.module.scss?50b2","pages/login/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login_panel\":\"login_login_panel__CqxUk\",\"login-form\":\"login_login-form__5hahy\",\"login-form-button\":\"login_login-form-button__r5LZr\"};","import { useState } from 'react';\nimport { Form, Input, Button, Checkbox, Spin } from 'antd'; // message\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { useStore } from '@/store/index';\nimport { observer } from 'mobx-react-lite';\nimport styles from './index.module.scss';\n\nfunction Login() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { loginStore, configStore } = useStore();\n  const [loading, setLoading] = useState(false);\n  // 登录\n  const onFinish = (values) => {\n    // console.log('Received values of form: ', values);\n    loginStore.login();\n    // message.success(t('login.success'));\n    setLoading(true);\n    setTimeout(() => {\n      navigate('/', { replace: true });\n      configStore.crumbItem();\n      setLoading(false);\n    }, 1000);\n  };\n  return (\n    <div className={styles['login_panel']}>\n      <Spin spinning={loading}>\n        <Form\n          name=\"normal_login\"\n          className={styles['login-form']}\n          initialValues={{\n            remember: true,\n          }}\n          onFinish={onFinish}\n        >\n          <Form.Item\n            name=\"username\"\n            rules={[\n              {\n                required: true,\n                message: t('login.username_check'),\n              },\n            ]}\n          >\n            <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder={t('login.username')} />\n          </Form.Item>\n          <Form.Item\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: t('login.password_check'),\n              },\n            ]}\n          >\n            <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} type=\"password\" placeholder={t('login.password')} />\n          </Form.Item>\n          <Form.Item>\n            <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\n              <Checkbox>{t('login.remember')}</Checkbox>\n            </Form.Item>\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" className={styles['login-form-button']}>\n              {t('login.login')}\n            </Button>\n          </Form.Item>\n        </Form>\n      </Spin>\n    </div>\n  );\n}\nexport default observer(Login);\n"],"names":["observer","t","useTranslation","navigate","useNavigate","useStore","loginStore","configStore","useState","loading","setLoading","className","styles","spinning","name","initialValues","remember","onFinish","values","login","setTimeout","replace","crumbItem","rules","required","message","prefix","UserOutlined","placeholder","LockOutlined","type","valuePropName","noStyle","htmlType"],"sourceRoot":""}